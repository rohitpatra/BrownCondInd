% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Npres_Fucntions.R
\name{npresid.boot}
\alias{npresid.boot}
\title{Code to approximate the asymptotic distribution through a model based bootstrap procedure (see Section 3.2.1 of Patra, Sen, and Székely (2015)) and evaluate the p-value of the proposed test}
\usage{
npresid.boot(data.to.work, z.dim, accuracy = 500, boot.replic = 999)
}
\arguments{
\item{data.to.work}{A numeric matrix containing `x`, `y`, and `z`. The first column is `x`, the second column is `y`, and the rest is data from `z`. We test for conditional independence of `x` and `y` given `z`}

\item{z.dim}{Dimension of the random variable `z`}

\item{accuracy}{It determines how precise you want to be when inverting the estimated conditional distribution function while generating the bootstrap samples.  500 is generally more than sufficient. Default is 500.}

\item{boot.replic}{Number of bootstrap replicates used for p value calculations.}
}
\value{

}
\description{
Code to approximate the asymptotic distribution through a model based bootstrap procedure (see Section 3.2.1 of Patra, Sen, and Székely (2015)) and evaluate the p-value of the proposed test
}
\examples{
# data generation mechanism used in the paper
# Returns a Matrix with n rows and columns (x, y, z_1, ...z_dim)
#x and y have to dimension real valued random variables
data.gen<-function(n,sigma_alt,dim){
  Data_to_write<- NULL
  z_prime = rnorm(n,0,sigma_alt)
  z = matrix(rnorm(n*dim,0,.3),nr=n, nc=dim)
  x = rnorm(n,z[,1],.2) + z_prime
  y = rnorm(n,z[,1],.2)  + z_prime
  Data_to_write=cbind(x,y,z)
  colnames(Data_to_write)[3:(dim+2)]= paste('z_', 1:dim,sep='')
  return(Data_to_write)
}
n=50 # Sample size
sigma_alt=0 # Used for generating the random variables (see Section 4 (simulation section)).
z.dim=1 # Dimension of z
# data generated is a matrix with nrow=n and ncol=dim+2 with (x, y, z_1, ...z_dim) as columns
data.to.work<- data.gen(n,sigma_alt,z.dim)
# bootstrap calculations to get p-values
out<-npresid.boot(data.to.work,z.dim,accuracy=500,boot.replic=5)
print(out$boot.data)
pvalue.out=out$p.value
print(pvalue)
}
